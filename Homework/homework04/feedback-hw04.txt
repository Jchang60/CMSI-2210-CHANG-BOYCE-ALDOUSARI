

Evaluation Criteria ~ homework04
CMSI 2210 Section 01 Fall 2024
=================================

LOGIC DESIGN
   Logic Question 1a         10 pts.
   Logic Question 1b          5 pts.
   Logic Question 2          10 pts.

REGISTER OPERATIONS
   Register clear even        2 pts.
   Register set last 3        2 pts.
   Reg./8 remainder           2 pts.
   Reg. set to -1             1 pts.
   Reg. invert 2 MSBs         2 pts.
   Register computation       2 pts.

STANLEY/PENGUIN ASSEMBLY
   Q4 - program 1a           11 pts.
   Q5 - program 1b           11 pts.
   Q6 - GCD prog.            10 pts.
   Q7 - swap frag             4 pts.
   Q8 - jmp to addr           4 pts.

REGISTER INVESTIGATION
   Q9a - high level expl.     5 pts.
   Q9b - Why?                 5 pts.


Total possible points        90 points

========================================================

TOTAL EARNED POINTS:
   you earned 86.0/ 90.0 which is 95.56% which is an A

========================================================
SPECIFIC COMMENTS/FEEDBACK:

evaluation of later submission with no penalty

all good except:
   problem 3 there are only six problems, so I'm skipping your label "d".
      the next one is wrong because "mov" is not a logic operation
   problem 6 I think you're a little off.  The code should look like:

                JMP start
      a:        0
      b:        0
      a_mod_b:  0              ; yes, we really need this
      start:    READ  0x100    ; read first value
                STORE a        ; and save it
                READ  0x100    ; read next value
                STORE b        ; and save that, too
      top:      LOAD  b        ; load the value at y
                JZ    done     ; if b == 0 go return a
                STORE a_mod_b  ; else store that as “a_mod_b”
                LOAD  a        ; get value at a
                MOD   b        ; mod it by value at b
                STORE b        ; store that for next b ~ a_mod_b := a % b
                LOAD  a_mod_b  ; load previous b value
                STORE a        ; store that at a ~ next_a := a_mod_b
                JMP   top      ; the JMP is at the top here
      done:     LOAD  a        ; load the value at a
                WRITE 0x200    ; This is the real "return a"
      end:      JMP   end

   problem 7 you need TWO variables.  your code loads the valur from memory
      into the temp location, then stores it right back.  It should be:

      STORE   t1         ; t1 holds a
      LOAD    0x30AA
      STORE   t2         ; t2 holds x
      LOAD    t1
      STORE   0x30AA     ; now 30AA holds original value of a
      LOAD    t2         ; now accumulator holds x

   problem 8 is close ~ you need two jump instructions, yet, but they should
      reflect the conditions:

      JGZ     0x837BBE1
      JZ      0x837BBE1

========================================================
SEMESTER SCORE SO FAR:

   homework01 ~   0.00% of  5 points =  0.00 points
   homework02 ~ 100.00% of  5 points =  5.00 points
   homework03 ~  89.84% of  5 points =  4.49 points
   homework04 ~  95.56% of  5 points =  4.78 points
                                total: 14.27 out of 20.0 = 71.34%

Please feel free to come see me during office hours to get some help.  The
hours are published at the top of the website syllabus page.

Don't give up!
